/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
  
* Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.pruebascomparator;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.Writer;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.security.MessageDigest;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;

/**
 *
 * @author jfunes
 */
public class compararFinal extends javax.swing.JFrame {

    /**
     * Creates new form comparadorPrueba
     */
    public compararFinal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Archivo 1");

        jLabel2.setText("Archivo 2");

        jButton2.setText("Buscar archivo 1 ...");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Buscar archivo 2 ...");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton1.setText("Enviar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent e) {
                try {
                    jButton1ActionPerformed(e);
                } catch (IOException ex) {
                    Logger.getLogger(compararFinal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setEditable(false);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jButton1)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(jLabel1)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(jButton2))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(jLabel2)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(jButton3)))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
                                                        .addComponent(jTextField1)))
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 433, Short.MAX_VALUE))
                                .addGap(0, 38, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jButton2)
                                        .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jButton3)
                                        .addComponent(jLabel2))
                                .addGap(27, 27, 27)
                                .addComponent(jButton1)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        
    public File dir1 = new File("");
    public File dir2 = new File("");
    public File arxiuComparacions = new File("comparacions.txt");
    public File carpetaSelect;

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) throws IOException {
//         TODO add your handling code here:

//        JFileChooser src3 = new JFileChooser();
//        int option3 = src3.showSaveDialog(this);
//        if (option3 == JFileChooser.APPROVE_OPTION) {
//            src3.setSelectedFile(arxiuComparacions);
//
//        if (evt.getSource() == jButton1) {
//                comparaArxius(liniesFitxer1, liniesFitxer2, nomFitxer1, nomFitxer2);
//            getDiff(dir1, dir2);
//        }
//        }
        if (evt.getSource() == jButton1) {
            
                getDiff(dir1, dir2);

        }

    }

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:

        JFileChooser src = new JFileChooser();
        src.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int option = src.showOpenDialog(this);

        if (option == JFileChooser.APPROVE_OPTION) {

            dir1 = src.getSelectedFile();
        }

        jTextField1.setText(dir1.getPath());
        jTextField1.setEditable(false);

    }

    /**
     * @param evt
     */
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:

        JFileChooser src2 = new JFileChooser();
        src2.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int option2 = src2.showOpenDialog(this);

        if (option2 == JFileChooser.APPROVE_OPTION) {

            dir2 = src2.getSelectedFile();
        }

        jTextField2.setText(dir2.getPath());
        jTextField2.setEditable(false);
    }

    public void getDiff(File dirA, File dirB) throws IOException {
        File[] fileList1 = dirA.listFiles();
        File[] fileList2 = dirB.listFiles();
        Arrays.sort(fileList1);
        Arrays.sort(fileList2);
        HashMap<String, File> map1;
        if (fileList1.length < fileList2.length) {
            map1 = new HashMap<String, File>();
            for (int i = 0; i < fileList1.length; i++) {
                map1.put(fileList1[i].getName(), fileList1[i]);
            }

            compareNow(fileList2, map1);
        } else {
            map1 = new HashMap<String, File>();
            for (int i = 0; i < fileList2.length; i++) {
                map1.put(fileList2[i].getName(), fileList2[i]);
            }
            compareNow(fileList1, map1);
        }
    }

    public void compareNow(File[] fileArr, HashMap<String, File> map) throws IOException {
        String axDif = "dif.txt";
        for (int i = 0; i < fileArr.length; i++) {
            String fName = fileArr[i].getName();
            File fComp = map.get(fName);
            map.remove(fName);
            if (fComp != null) {
                if (fComp.isDirectory()) {
                    getDiff(fileArr[i], fComp);
                } else {
                    String cSum1 = checksum(fileArr[i]);
                    String cSum2 = checksum(fComp);
                    if (!cSum1.equals(cSum2)) {
                        BufferedWriter ola = new BufferedWriter(new FileWriter("diferente.txt", true));
                        ola.write(fileArr[i].getPath() + "\t : " + "diferente");
                        ola.newLine();
                        ola.close();
                    } else {
                        BufferedWriter ola = new BufferedWriter(new FileWriter("identico.txt", true));
                        ola.write(fileArr[i].getPath()+ "\t : " + "identico");
                        ola.newLine();
                        ola.close();
                    }
                }
            } else {
                if (fileArr[i].isDirectory()) {
                    traverseDirectory(fileArr[i]);
                } //else {
                //System.out.println(fileArr[i].getName() + "\t\t" + "only in " + fileArr[i].getParent());
                // }
            }
        }
        Set<String> set = map.keySet();
        Iterator<String> it = set.iterator();
        while (it.hasNext()) {
            String n = it.next();
            File fileFrmMap = map.get(n);
            it.remove();
            if (fileFrmMap.isDirectory()) {
                traverseDirectory(fileFrmMap);
            } //else {
//                System.out.println(fileFrmMap.getName() + "\t\t" + "only in " + fileFrmMap.getParent());
//            }
        }
    }

    public void traverseDirectory(File dir) {
        File[] list = dir.listFiles();
        for (int k = 0; k < list.length; k++) {
            if (list[k].isDirectory()) {
                traverseDirectory(list[k]);
            } //else {
//                System.out.println(list[k].getName() + "\t\t" + "only in " + list[k].getParent());
//            }
        }
    }

    public String checksum(File file) {
        try {
            InputStream fin = new FileInputStream(file);
            java.security.MessageDigest md5er = MessageDigest.getInstance("MD5");
            byte[] buffer = new byte[1024];
            int read;
            do {
                read = fin.read(buffer);
                if (read > 0) {
                    md5er.update(buffer, 0, read);
                }
            } while (read != -1);
            fin.close();
            byte[] digest = md5er.digest();
            if (digest == null) {
                return null;
            }
            String strDigest = "0x";
            for (int i = 0; i < digest.length; i++) {
                strDigest += Integer.toString((digest[i] & 0xff) + 0x100, 16).substring(1).toUpperCase();
            }
            return strDigest;
        } catch (Exception e) {
            return null;
        }
    }

    public static List<String> llegirFitxer(String filePath) {
        List<String> linies = new ArrayList<>();

        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String linia;
            while ((linia = reader.readLine()) != null) {
                linies.add(linia);
            }
        } catch (IOException e) {
            System.err.println("Error al llegir l'arxiu: " + filePath);
            e.printStackTrace();
        }

        return linies;
    }

    public void comparaArxius(List<String> arxiuLinies1, List<String> arxiuLinies2, String nomFitxer1, String nomFitxer2) {
        int numLinies = Math.max(arxiuLinies1.size(), arxiuLinies2.size());
        int diferencias = 0;

        StringBuilder output = new StringBuilder();

        for (int i = 0; i < numLinies; i++) {
            if (i < arxiuLinies1.size() && i < arxiuLinies2.size()) {
                if (!arxiuLinies1.get(i).equals(arxiuLinies2.get(i))) {
                    diferencias++;
                    output.append("Diferencia en la linea ").append(i + 1).append(":\n");
                    output.append("Arxiu 1: ").append(arxiuLinies1.get(i)).append("\n");
                    output.append("Arxiu 2: ").append(arxiuLinies2.get(i)).append("\n\n");
                }
            } else if (i < arxiuLinies1.size()) {
                diferencias++;
                output.append("El arxiu 2 no te la linea ").append(i + 1).append("\n");
                output.append("Arxiu 1: ").append(arxiuLinies1.get(i)).append("\n\n");
            } else if (i < arxiuLinies2.size()) {
                diferencias++;
                output.append("El arxiu 1 no te la linea ").append(i + 1).append("\n");
                output.append("Arxiu 2: ").append(arxiuLinies2.get(i)).append("\n\n");
            }
        }

        arxiuComparacions(nomFitxer1, nomFitxer2);

        jTextArea1.setText(output.toString());
    }

    public void arxiuComparacions(String nomFitxer1, String nomFitxer2) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(arxiuComparacions, true))) {
            writer.append("Els següens arxius tenen el codi diferent:\n");
            writer.append(nomFitxer1);
            writer.append(",\n ");
            writer.append(nomFitxer2);
            writer.newLine();
        } catch (IOException e) {
            System.err.println("Error al escriure en el arxiu de comparacions.");
            e.printStackTrace();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(compararFinal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(compararFinal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(compararFinal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(compararFinal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new compararFinal().setVisible(true);
            }
        });
    }

    // Variables declaration                   
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration                   
}
